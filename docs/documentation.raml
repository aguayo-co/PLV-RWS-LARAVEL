- title: Introducción
  content: |
    Esta es una breve introducción sobre los conceptos generales que se trabajan en el api, y algunas
    convenciones que se manejan en todas las peticiones.

- title: Formato de datos
  content: |
    Este api trabaja con respuestas JSON. Las descripciones de los objetos tienen todos los campos
    de los mismos, algunos de los cuales son de sólo lectura, pero no está especificado en cada elemento.

    Los siguientes campos son siempre de sólo lectura:
    - id
    - created_at
    - updated_at

- title: Asociación de datos
  content: |
    Cuando un modelo tenga un campo que referencia a otro o a si mismo, este campo tendrá terminación *_id*.
    En algunos de los casos, las respuestas incluirán un campo adicional expandido, así:
    ```json
    {
      "id": 1,
      "name": "I have an associated element",
      "child_id": 2,
      "child": {
        "id": 2,
        "name": "I have a parent."
      }
    }
    ```

    Cuando un modelo tenga un campo que referencia a otros modelos, este campo tendrá terminació *_ids*.
    En algunos de los casos, las respuestas incluirán un campo adicional expandido, así:
    ```json
    {
      "id": 1,
      "name": "I have an associated products",
      "product_ids": [2, 4],
      "products": [
        {
          "id": 2,
          "name": "I am a product."
        },
        {
          "id": 4,
          "name": "I also am a product."
        }
      ]
    }
    ```
    Los campos múltiples pueden venir paginados, en cuyo caso la expansión tendrá los campos de paginación, y los
    modelos asociados vendrán dentro de la propiedad `data`, tal cómo una colección paginada.

- title: Peticiones
  content: |
    Las peticiones al API deben aceptar respuestas JSON. EN caso de no aceptarlas el API mostrará un error.
    Para especificar que la petición acepta JSON, se debe enviar el encabezado:

    ```
    Accept: application/json
    ```

    #### Peticiones POST y PATCH:

    Cuando la petición quiera modificar información en el servidor, puede enviar la información en formato JSON o
    en multipart/form-data. Este último es necesairo para el envío de archivos. Esto se especifica con los
    encabezados correspondientes:

    ```
    Content-Type: application/json
    Content-Type: multipart/form-data
    ```

    En todo caso las respuestas serán JSON.
    En las descripciones de los métodos no se especifica que acepten `multipart/form-data`, pero en todos en los que
    se acepta `application/json`, es válido usar cualquierda de los dos.

    ##### Peticiones PATCH:

    Las peticiones PATCH no permiten el envío de datos usando `Content-Type: multipart/form-data`, por
    lo que se debe enviar una petición POST, con un campo adicional `_method` que le informe al API que es una
    petición PATCH:

    ```
    Content-Disposition: form-data; name="_method"
    PATCH
    ```

    Si la petición se envía con datos JSON, entonces sí se puede efectuar con método PATCH.

    Las peticiones PATCH sólo actualizan los campos que recibe.

    - Si un campo no es enviado, este no se modifica en la base de datos.
    - Si un campo va vacío, este se elimina de la base de datos.

- title: Colecciones
  content: |
    Las peticiones que traigan colecciones de datos vendrán paginadas y tendrán la siguiente estructura:

    ```json
    {
      "current_page": 3,
      "data": [
        objeto,
        objeto,
        objeto,
        ...
        objeto
      ],
      "first_page_url": "https://prilov.aguayo.co/api/colors?page=1",
      "from": 31,
      "next_page_url": "https://prilov.aguayo.co/api/colors?page=4",
      "path": "https://prilov.aguayo.co/api/colors",
      "per_page": 15,
      "prev_page_url": "https://prilov.aguayo.co/api/colors?page=2",
      "to": 45
    }
    ```

    Estas peticiones reciben dos parámetros por URL que controlan la página y la cantidad de objetos por página:

    - page
    - items

    Ejemplo:

    ```
    ?page=5&items25 # Trae la página 5, con 25 elementos en cada página.
    ```

- title: Ordenamiento
  content: |
    Algunas de las peticiones permiten ordenar los resultados por criterios enviados por URL.
    Cuando una petición es ordenable, se debe pasar un parámetro `orderby` en la url con los valores
    por los que se quiere ordenar separados por coma. Cuando un valor se quiere ordenar de forma descendente,
    se debe anteponer el signo `-` al mismo.

    Cualquier petición que sea ordenable tiene los siguientes parámetros disponibles:
    - updated_at
    - created_id
    - id

    Ejemplo:
    ```
    ?orderby=id # Ordena por ID de forma ascendente
    ?orderby=-id # Ordena por ID de forma descendente
    ?orderby=updated_at,id #Ordena primero por fecha de actualización, y después por ID.
    ```

    Algunas coleciones tendrán otras opciones de ordenamiento.

- title: Filtrado
  content: |
    En general, cualquier petición que sea ordenable, es filtrable.
    Existen 3 tipos de filtros:
    - ContenidoEn
    Este filtro recibe una lista de valores separados por comas, y se devuelven los resultados que tengan
    cualquiera de estos. Por ejemplo productos que pertenecen a ciertas categorías.
    - Entre
    Este filtro recibe dos valores separados por comas y se devuelven los resultados que tengan valores contenidos
    entre estos dos, incluyendo los dos valores. Por ejemplo productos que están entre dos precios.
    - Como
    Este filtro hace búsquedas de un patron de texto en una campo determinado, y devuelve los resultados
    que contengan dicho patrón. Acepta dos comodines. `%` para múltiples caracteres. `_` para un caracter.

    Los filtros se pasan por parametros de URL como arreglos de la siguiente forma:
    ```
    # genérico:
    ?filter[{{ filtro }}]={{ valore1,valor2 }}

    # resultados entre dos precios, tipo Entre.
    ?filter[price]=1000,2500

    # resultados con colores, tipo ContenidoEn.
    ?filter[color_ids]=1,3,5

    # los dos filtros al tiempo:
    ?filter[color_ids]=1,3,5&filter[price]=1000,2500

    # resultados cuyo slug termine con "magia".
    # Importante tener en cuenta la codificacion de caracteres para URL.
    ?filter[slug]=%25magia
    ```

    Todos las colecciones ordenables tiene por defecto los siguientes elementos filtrables:

    |filtro|tipo|
    |------|----|
    |id|ContenidoEn|
    |updated_at|Entre|
    |created_at|Entre|

    Las colecciones que tengan campo `slug` aceptan el siguiente filtro:

    |filtro|tipo|
    |------|----|
    |slug|Como|

- title: Búsquedas
  content: |
    Cuando una colección permita realizar búsquedas de texto, el criterio de búsqueda se debe pasar por URL con el
    el parámetro `q`

    Ejemplo:
    ```
    ?q=pantalon negro
    ```

    Las búsquedas de texto no son eficientes en MySQL, sobre todo cuando se combina con ordenado o filtrado.

- title: Autenticación
  content: |
    Existen 2 tipos de usuarios en el portal:

      - Autenticado
      - No Autenticado

    Un usuario se considera autenticado cuando envía una petición con un token Bearer como encabezado:

    ```
    Authorization: Bearer TOKEN
    ```

    Cada sesión de usuario tendrá un tóken diferente, de esta forma el usuario puede estar
    autenticado en multiples dispositivos a la vez.

    Cuando un usuario cambia de contraseña, todos los tokens serán invalidados.

    Para obtener el token, se debe hacer una petición a la ruta de logueo con las credenciales de el usuario.
    Si las credenciales son válidas el token es devuelto cómo parte del cuerpo del usuario validado. Ejemplo:

    ```
    {
      "id": 8,
      "api_token": "..."
      ...
    }
    ```

    Adicionalmente el token es enviado cuando un usuario:
    - Se registra
    - Cambia su contraseña
    - Resetea su contraseña

- title: Errores y validaciones
  content: |
    Cuando la petición no es exitosa por que la validación de datos no es correcta, las respuesta incluye
    información sobre que datos no pasaron la validación, incluyendo cada campo que no fue exitoso. Ejemplo:

    ```
    {
      "message": "The given data was invalid.",
      "errors": {
        "email": [
          "El campo email no corresponde con una dirección de e-mail válida."
        ],
        "cover": [
          "El campo cover debe ser una imagen."
        ]
      }
    }
    ```

    Un caso especial es la validación de correo electrónico, que cuando ya existe uno registrado en el portal
    el error se envía en el campo "exists".

    ```
    {
      "message": "The given data was invalid.",
      "exists": [
        "Hay otro usuario registrado con el mismo correo."
      ]
    }
    ```

- title: Permisos y autorizaciones
  content: |
    Cada usuario podrá modificar los datos de los modelos de los que sea dueño.
    Los usuarios pueden tener roles asignados que les permiten efectuar operaciones adicionales en el portal.

    Los dos roles iniciales son:

    - admin: permite crear y modificar cualquier objeto en el portal, y cambiar el dueño de los objetos.
    - seller: permite crear productos.

