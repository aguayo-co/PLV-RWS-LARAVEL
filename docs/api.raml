#%RAML 1.0
title: Prilov Api
version: 0.7.0
baseUri: https://prilov.aguayo.co/api
documentation:
- title: Introducción
  content: |
    Esta es una breve introducción sobre los conceptos generales que se trabajan en el api, y algunas
    convenciones que se manejan en todas las peticiones.

- title: Formato de datos
  content: |
    Este api trabaja con respuestas JSON. Las descripciones de los objetos tienen todos los campos
    de los mismos, algunos de los cuales son de sólo lectura, pero no está especificado en cada elemento.

    Los siguientes campos son siempre de sólo lectura:
    - id
    - created_at
    - updated_at

- title: Asociación de datos
  content: |
    Cuando un modelo tenga un campo que referencia a otro o a si mismo, estos campos tendrán terminación *_id*.
    En algunos de los casos, las repsuestas incluirán un campo adicional no especificado con el modelo relacionado
    expandido, así:
    ```json
    {
      "id": 1,
      "name": "I have an associated element",
      "child_id": 2,
      "child": {
        "id": 2,
        "name": "I have a parent."
      }
    }
    ```

- title: Peticiones
  content: |
    Las peticiones al API deben aceptar respuestas JSON. EN caso de no aceptarlas el API mostrará un error.
    Para especificar que la petición acepta JSON, se debe enviar el encabezado:

    ```
    Accept: application/json
    ```

    #### Peticiones POST y PATCH:

    Cuando la petición quiera modificar información en el servidor, puede enviar la información en formato JSON o
    en multipart/form-data. Este último es necesairo para el envío de archivos. Esto se especifica con los
    encabezados correspondientes:

    ```
    Content-Type: application/json
    Content-Type: multipart/form-data
    ```

    En todo caso las respuestas serán JSON.
    En las descripciones de los métodos no se especifica que acepten `multipart/form-data`, pero en todos en los que
    se acepta `application/json`, es válido usar cualquierda de los dos.

    ##### Peticiones PATCH:

    Las peticiones PATCH no permiten el envío de datos usando `Content-Type: multipart/form-data`, por
    lo que se debe enviar una petición POST, con un campo adicional `_method` que le informe al API que es una
    petición PATCH:

    ```
    Content-Disposition: form-data; name="_method"
    PATCH
    ```

    Si la petición se envía con datos JSON, entonces sí se puede efectuar con método PATCH.

    Las peticiones PATCH sólo actualizan los campos que recibe.

    - Si un campo no es enviado, este no se modifica en la base de datos.
    - Si un campo va vacío, este se elimina de la base de datos.

- title: Colecciones
  content: |
    Las peticiones que traigan colecciones de datos vendrán paginadas y tendrán la siguiente estructura:

    ```json
    {
      "current_page": 3,
      "data": [
        objeto,
        objeto,
        objeto,
        ...
        objeto
      ],
      "first_page_url": "https://prilov.aguayo.co/api/colors?page=1",
      "from": 31,
      "next_page_url": "https://prilov.aguayo.co/api/colors?page=4",
      "path": "https://prilov.aguayo.co/api/colors",
      "per_page": 15,
      "prev_page_url": "https://prilov.aguayo.co/api/colors?page=2",
      "to": 45
    }
    ```

    Estas peticiones reciben dos parámetros por URL que controlan la página y la cantidad de objetos por página:

    - page
    - items

    Ejemplo: *https://prilov.aguayo.co/api/colors?page=5&items25*

- title: Autenticación
  content: |
    Existen 2 tipos de usuarios en el portal:

      - Autenticado
      - No Autenticado

    Un usuario se considera autenticado cuando envía una petición con un token Bearer como encabezado:

    ```
    Authorization: Bearer TOKEN
    ```

    Cada sesión de usuario tendrá un tóken diferente, de esta forma el usuario puede estar
    autenticado en multiples dispositivos a la vez.

    Cuando un usuario cambia de contraseña, todos los tokens serán invalidados.

    Para obtener el token, se debe hacer una petición a la ruta de logueo con las credenciales de el usuario.
    Si las credenciales son válidas el token es devuelto cómo parte del cuerpo del usuario validado. Ejemplo:

    ```
    {
      "id": 8,
      "api_token": "..."
      ...
    }
    ```

    Adicionalmente el token es enviado cuando un usuario:
    - Se registra
    - Cambia su contraseña
    - Resetea su contraseña

- title: Errores y validaciones
  content: |
    Cuando la petición no es exitosa por que la validación de datos no es correcta, las respuesta incluye
    información sobre que datos no pasaron la validación, incluyendo cada campo que no fue exitoso. Ejemplo:

    ```
    {
      "message": "The given data was invalid.",
      "errors": {
        "email": [
          "El campo email no corresponde con una dirección de e-mail válida."
        ],
        "cover": [
          "El campo cover debe ser una imagen."
        ]
      }
    }
    ```

    Un caso especial es la validación de correo electrónico, que cuando ya existe uno registrado en el portal
    el error se envía en el campo "exists".

    ```
    {
      "message": "The given data was invalid.",
      "exists": [
        "Hay otro usuario registrado con el mismo correo."
      ]
    }
    ```

- title: Permisos y autorizaciones
  content: |
    Cada usuario podrá modificar los de los que sea dueño.
    Los usuarios pueden tener roles asignados que les permiten efectuar operaciones adicionales en el portal.

    El rol más importante es 'admin' que permite crear y modificar cualquier objeto en el portal, y cambiar el dueño
    de los objetos.

securitySchemes:
  token:
    type: Pass Through
    description: "Authentication by header"
    describedBy:
      headers:
        Authorization:
          description: "Use the Bearer keyword. Example Authorization Bearer [API_key]"
          type: string

types:
  BaseObject:
    type: object
    properties:
      id?: datetime
      created_at?: datetime
      updated_at?: datetime
  Property:
    type: BaseObject
    properties:
      name: string
      slug?: string

  Banner:
    type: Property
    properties:
      title: string
      subtitle: string
      image: string
      button_text: string
      url: string
  Brand:
    type: Property
    properties:
      url: string
  Campaign:
    type: Property
  Category:
    type: Property
    properties:
      parent?: number
  Color:
    type: Property
  Condition:
    type: Property
  Status:
    type: Property
  Slider:
    type: Property
    properties:
      large_text: string
      small_text: string
      button_text: string
      orientation: string
      font_color: string
      image: string
      url: string

  Address:
    type: BaseObject
    properties:
      user_id: integer
      address: string
      region: string
      zone: string
  User:
    type: BaseObject
    properties:
      email: string
      first_name: string
      last_name: string
      password: string
      about?: string
      phone?: string
      cover?: file
      picture?: file
      favorite_address_id?: integer
  UserExpanded:
    type: [User]
    properties:
      addresses?: Address[]
      roles?: string[]
  UserLogged:
    type: UserExpanded
    properties:
      api_token: string
  Product:
    type: BaseObject
    properties:
      title: string
      slug?: string
      images: file[]
      delete_images?: string[]
      description: string
      dimensions: string
      originalPrice: number
      price: number
      commission: number
      user_id: integer
      brand_id: integer
      category_id: integer
      color_ids: integer[]
      condition_id: integer
      status_id: integer
  ProductExpanded:
    type: Product
    properties:
      user?: User
      brand?: Brand
      category?: Category
      colors?: Property[]
      condition?: Property
      size?: Property
      status?: Property
  Auth:
    type: object
    properties:
      email: string
      password: string
  ShippingMethod:
    type: Property
    properties:
      descriptionSeller: string
      descriptionBuyer: string
  DetailedAnswer:
    type: object
    properties:
      message: string
      errors?:
        type: object
        properties:
          /^[a-z_]*$/: string[]
  Menu:
    type: BaseObject
    properties:
      name: string
  MenuExpanded:
    type: Menu
    properties:
      items?: MenuItem[]
  MenuItem:
    type: BaseObject
    properties:
      name: string
      url?: string
      parent_id?: number
      menu_id?: number
      icon?: string

resourceTypes:
  collection:
    get:
      description: Get all the <<resourcePathName|!pluralize|!uppercamelcase>>
      is: [ paginated ]
    post:
      is: [ createItemPost ]
      securedBy: [token: { scopes: [ admin ] }]

  singleItem:
    get:
      is: [ singleItemResponse ]
      description: Retrieve the given <<resourcePathName|!singularize|!uppercamelcase>>
    patch:
      is: [ singleItemResponse, responseError ]
      securedBy: [token: { scopes: [ admin ] }]
      description: Update the given <<resourcePathName|!singularize|!uppercamelcase>>
      body:
        application/json:
          type: <<resourcePathName|!singularize|!uppercamelcase>>
    delete:
      is: [ responseError ]
      securedBy: [token: { scopes: [ admin ] }]
      description: Delete the given <<resourcePathName|!singularize|!uppercamelcase>>
      responses:
        200:
          body:
            application/json:
              type: DetailedAnswer
              example:
                {
                  "message": "Object deleted"
                }



/users:
  post:
    is: [ logged, createItemPost ]
  /{user-id}:
    type: singleItem
    get:
      is: [ expanded ]
    patch:
      securedBy: [token: { scopes: [ owner ] }]
      is: [ expanded ]
    /addresses:
      type: collection

  /login:
    post:
      is: [ logged, responseError ]
      description: "Logs in an User"
      body:
        application/json:
          type: Auth
          example:  {
            email: "marie@curie.com",
            password: "asd|@123"
          }
  /password/recovery/{email}:
    get:
      description: "Requires a password recovery link for an user"
      responses:
        200:
          description: "A reset link has been send to the email specified"
        400:
          body:
            application/json:
              type: DetailedAnswer
              example:
                {
                  "message": "There was an error on the request",
                  "errors": {
                    "attempts": [
                      "Too many password request for the given email"
                    ],
                    "email": [
                      "The given email is invalid or empty"
                    ]
                  }
                }
    post:
      is: [ responseError ]
      description: "Validates a password reset token"
      body:
        application/json:
          type: object
          properties:
            token: string
      responses:
        200:
          description: "The provided password token is valid"
  /users/password/reset/{email}:
    post:
      is: [ responseError ]
      description: "Validates a password reset token"
      body:
        application/json:
          type: object
          properties:
            password: string
            token: string
      responses:
        200:
          description: "The provided password token is valid"

/menus:
  type: collection
  get:
    is: [ expanded ]
  post:
    is: [ expanded ]
  /{menu-slug}:
    type: singleItem
    get:
      is: [ expanded ]
    patch:
      is: [ expanded ]
/menu_items:
  type: collection
  /{menu_item-id}:
    type: singleItem

/products:
  type: collection
  get:
    is: [ expanded ]
  post:
    is: [ expanded ]
  /{product-id}/{product-slug}:
    type: singleItem
    get:
      is: [ expanded ]
    patch:
      description: |
        Update the given Product

        ##### Agregar imágenes

        Las imágenes que se envíen en el campo `images`, serán aregadas al listado de imágenes que ya tenga
        el producto. Para eliminar imágenes se debe enviar la información en un campo `delete_images`.

        ##### Eliminación de imágenes

        Para eliminar imágenes de los productos se debe pasar un arreglo con los nombres de las imagenes en le campo
        **delete_images**. Cada nombre debe inluir la extension, si el archivo tiene una, pero no la ruta al mismo.

        ###### Ejemplo:

        Para eliminar estas dos imágenes:

        - `https://prilov.aguayo.co/storage/products/images/1/qwe1234567890`
        - `https://prilov.aguayo.co/storage/products/images/1/asd0987654321.gif`

        Se debe pasar:

        ````
        {
          "delete_images": [
            "qwe1234567890",
            "asd0987654321.gif"
          ]
        }
        ```
      securedBy: [token: { scopes: [ owner ] }]
      is: [ expanded ]
  /category/{category-slug}:
    get:
      description: "Gets a paginated result of products with the specified category"
      is: [ paginated ]
      responses:
        404:
          description: "Category not found."
  /campaign/{campaign-slug}:
    get:
      description: "Gets a paginated result of products with the specified campaign"
      is: [ paginated ]
      responses:
        404:
          description: "Campaign not found."

/shipping_methods:
  type: collection
  /{shipping_method-slug}:
    type: singleItem

/banners:
  type: collection
  /{banner-slug}:
    type: singleItem
/brands:
  type: collection
  /{brand-slug}:
    type: singleItem
/campaigns:
  type: collection
  /{campaign-slug}:
    type: singleItem
/categories:
  type: collection
  /{category-slug}:
    type: singleItem
/colors:
  type: collection
  /{color-slug}:
    type: singleItem
/conditions:
  type: collection
  /{condition-slug}:
    type: singleItem
/sliders:
  type: collection
  /{sliders-slug}:
    type: singleItem
/statuses:
  type: collection
  /{status-slug}:
    type: singleItem

traits:
  paginated:
    queryParameters:
      items:
        type: number
        description: "Number of items to retrieve"
      page:
        type: number
        description: "The page number that should be retrieved accordingly to the number of items requested"
    responses:
      200:
        body:
          application/json:
            type: <<resourcePathName|!singularize|!uppercamelcase>>[]

  responseError:
    responses:
      4XX:
        description: "Invalid request."
        body:
          application/json:
            type: DetailedAnswer
            example:
              {
                "message": "The given data was invalid.",
                "errors": {
                  "field_name_1": [
                    "Invalid data provided for field_name_1."
                  ],
                  "field_name_2": [
                    "field_name_2 is required."
                  ]
                }
              }

  singleItemResponse:
    responses:
      200:
        body:
          application/json:
            type: <<resourcePathName|!singularize|!uppercamelcase>>
      404:
        description: "<<resourcePathName|!singularize|!uppercamelcase>> not found."

  createItemPost:
    description: Create a new <<resourcePathName|!singularize|!uppercamelcase>>
    body:
      multipart/form-data:
        type: <<resourcePathName|!singularize|!uppercamelcase>>
      application/json:
        type: <<resourcePathName|!singularize|!uppercamelcase>>
    is: [ responseError ]
    responses:
      200:
        body:
          application/json:
            type: <<resourcePathName|!singularize|!uppercamelcase>>

  expanded:
    responses:
      200:
        body:
          application/json:
            type: <<resourcePathName|!singularize|!uppercamelcase>>Expanded
  logged:
    responses:
      200:
        body:
          application/json:
            type: UserLogged
