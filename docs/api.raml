#%RAML 1.0
title: Prilov Api
version: 0.5.0
baseUri: http://prilov.aguayo.co/api

securitySchemes:
  token:
    type: Pass Through
    description: "Authentication by header"
    describedBy:
      headers:
        Authorization:
          description: "Use the Bearer keyword. Example Authorization Bearer [API_key]"
          type: string

types:
  BaseModel:
    type: object
    properties:
      id?: number
      created_at?: datetime
      updated_at?: datetime
  Property:
    type: [BaseModel]
    properties:
      name: string
      slug?: string
  Brand:
    type: [Property]
    properties:
      url: string
  Category:
    type: [Property]
    properties:
      parent?: number
  Address:
    type: object
    properties:
      address: string
      region: string
      zone: string
      user: number
  User:
    type: [BaseModel]
    properties:
      id?: integer
      email: string
      first_name: string
      last_name: string
      password: string
      phone?: string
      cover?: file
      picture?: file
      about?: string
      followers?: number
      following?: number
      positiveRatings?: number
      negativeRatings?: number
      neutralRatings?: number
      vacationMode?: boolean
      shippingMethods?: ShippingMethod[]
      favoriteAddress?: Address
  Product:
    type: [BaseModel]
    properties:
      title: string
      images: file[]
      description: string
      dimensions: string
      originalPrice: number
      price: number
      commission: number
      user?: User
      user_id: integer
      brand?: Brand
      brand_id: integer
      category?: Category
      category_id: integer
      colors?: Property[]
      color_ids: integer[]
      condition?: Property
      condition_id: integer
      status?: Property
      status_id: integer
      size?: Property
  Auth:
    type: object
    properties:
      email: string
      password: string
  Token:
    type: object
    properties:
      token: string
  ShippingMethod:
    type: object
    properties:
      name: string
      descriptionSeller: string
      descriptionBuyer: string
  DetailedAnswer:
    type: object
    properties:
      message: string
      errors?:
        type: object
        properties:
          /^[a-z_]*$/: string[]
  Menu:
    type: object
    properties:
      name: string
      items?: object[]
        example:
          [
            {
              id: 1,
              name: "Moda Femenina",
              url: "/moda-femenina",
              items: [
                {
                  id: 2,
                  "name": "Tops",
                  "url": "/moda-femenina/tops"
                },
                {
                  id: 3,
                  "name": "Poleras",
                  "url": "/moda-femenina/poleras"
                }
              ]
            }
          ]
  MenuItem:
    type: [BaseModel]
    properties:
      name: string
      url?: string
      parentItem?: number
      parentMenu?: number
      icon?: string
  Banner:
    type: [BaseModel]
    properties:
      name: string
      title: string
      subtitle: string
      image: string
      buttonText: string
      url: string

/users:
  post:
    description: "Creates a new User"
    body:
      application/json:
        type: User
        example:  {
          first_name: "Marie",
          last_name: "Curie",
          email: "marie@curie.com",
          password: "asd|@123"
        }
    responses:
      201:
        description: "User was created succesfully"
      400:
        description: "There is an error on the input given for user creation"
        body:
          application/json:
            type: DetailedAnswer
            example:
              {
                "message": "The given data was invalid.",
                "errors": {
                  "firstname": [
                    "The firstname field is invalid or empty."
                  ],
                  "email": [
                    "The email field is invalid or empty"
                  ],
                  "exists": [
                    "There is another user registered with the same email"
                  ],
                  "password": [
                    "The password field is invalid or empty"
                  ]
                }
              }
  /{user-id}:
    get:
      description: "Retrieves the public data of an user"
      responses:
        200:
          body:
            application/json:
              type: User
        404:
          description: "The user with the specified ID could not be found"
    patch:
      securedBy: [token: { scopes: [ admin, owner ] }]
      description: "Updates the information of an user."
      body:
        application/json:
          type: User
      responses:
        200:
          description: "The user was updated succesfully"
          body:
            application/json:
              type: User
        401:
          description: "Unauthorized request"
        404:
          description: "User with the provided ID could not be found"
        400:
          body:
            application/json:
              type: DetailedAnswer
              example:
                {
                  "message": "The given data was invalid.",
                  "errors": {
                    "email": [
                      "The email field is invalid or empty"
                    ],
                    "password": [
                      "The password field is invalid or empty"
                    ]
                  }
                }
    /addresses:
      get:
        securedBy: [token: { scopes: [ admin, owner ] }]
        description: "Get all the addreses of the specified user."
        responses:
          200:
            body:
              application/json:
                type: Address[]
          404:
            description: "User could not be found"
          401:
            description: "Unauthorized request"
      post:
        securedBy: [token: { scopes: [ admin, owner ] }]
        description: "Creates a new Address linked to the specified user."
        body:
          application/json:
            type: Address
        responses:
          201:
            description: "The address was added succesfully"
            body:
              application/json:
                type: Address
          400:
            body:
              application/json:
                type: DetailedAnswer
          404:
            description: "User could not be found"
          401:
            description: "Unauthorized request"

  /login:
    post:
      description: "Logs in an User"
      body:
        application/json:
          type: Auth
          example:  {
            email: "marie@curie.com",
            password: "asd|@123"
          }
      responses:
        200:
          body:
            application/json:
              type: [User, Token]
        400:
          body:
            application/json:
              type: DetailedAnswer
              example:
                {
                  "message": "The given data was invalid.",
                  "errors": {
                    "email": [
                      "The email field is invalid or empty"
                    ],
                    "password": [
                      "The password field is invalid or empty"
                    ]
                  }
                }
  /password/recovery/{email}:
    get:
      description: "Requires a password recovery link for an user"
      responses:
        200:
          description: "A reset link has been send to the email specified"
        400:
          body:
            application/json:
              type: DetailedAnswer
              example:
                {
                  "message": "There was an error on the request",
                  "errors": {
                    "attempts": [
                      "Too many password request for the given email"
                    ],
                    "email": [
                      "The given email is invalid or empty"
                    ]
                  }
                }
    post:
      description: "Validates a password reset token"
      body:
        application/json:
          type: Token
      responses:
        200:
          description: "The provided password token is valid"
        400:
          description: "The provided password token is invalid"

/menus:
  post:
    securedBy: [token: { scopes: [ admin ] }]
    description: "Creates a new menu"
    body:
      application/json:
        type: Menu
  /{menu-name}:
    get:
      description: "Gets the items of the specified menu by name"
      responses:
        200:
          description: "Menu retrieved succesfully"
          body:
            application/json:
              type: Menu
              example:
                {
                  "name": "main",
                  "items": [
                    {
                      id: 1,
                      name: "Moda Femenina",
                      url: "/moda-femenina",
                      children: [
                        {
                          id: 2,
                          "name": "Tops",
                          "url": "/moda-femenina/tops"
                        },
                        {
                          id: 3,
                          "name": "Poleras",
                          "url": "/moda-femenina/poleras"
                        }
                      ]
                    }
                  ]
                }
        404:
          description: "The specified menu could not be found"
  /item:
    post:
      securedBy: [token: { scopes: [ admin ] }]
      description: "Creates a new menu item"
      body:
        application/json:
          type: MenuItem
      responses:
        201:
          description: "Item was created succesfully"
          body:
            application/json:
              type: MenuItem
        401:
          description: "Unauthorized request"
        400:
          body:
            application/json:
              type: DetailedAnswer

/products:
  post:
    securedBy: token
    description: "Creates a new product. Requires authorization of an user with all fields completed"
    body:
      application/json:
        type: Product
    responses:
      200:
        description: "Product created succesfully"
        body:
          application/json:
            type: Product
      401:
        description: "Unauthorized request"
      400:
        body:
          application/json:
            type: DetailedAnswer
  /{product-id}:
    get:
      description: "Get the product with specified ID"
      responses:
        200:
          body:
            application/json:
              type: Product
        404:
          description: "The product with the specified id could not be found"
    patch:
      securedBy: [token: { scopes: [ admin, owner ] }]
      description: "Updates the product with the specified id."
      body:
        application/json:
          type: Product
      responses:
        200:
          description: "The product has been updated successfuly"
          body:
            application/json:
              type: Product
        400:
          body:
            application/json:
              type: DetailedAnswer
        404:
          description: "The product with the specified id could not be found"
        401:
          description: "Unauthorized request"
  /category/{category-name}:
    get:
      description: "Gets an array of products with the specified category"
      queryParameters:
        items:
          type: number
          description: "Number of items to retrieve"
        page:
          type: number
          description: "The page number that should be retrieved accordingly to the number of items requested"
      responses:
        200:
          body:
            application/json:
              type: Product[]
        404:
          description: "There are not products with the specified category"
/shipping:
  post:
    securedBy: [token: { scopes: [ admin ] }]
    description: "Creates a new shipping method on the platform. Requires admin authorization"
    body:
      application/json:
        type: ShippingMethod
    responses:
      201:
        description: "Shipping method has been added succesfully"
      401:
        description: "Unauthorized request"
      400:
        body:
          application/json:
            type: DetailedAnswer
/banners:
  post:
    securedBy: [token: { scopes: [ admin ] }]
    description: "Creates a new banner on the platform. Requires admin authorization"
    body:
      application/json:
        type: Banner
    responses:
      201:
        description: "The banner has been added succesfully"
      401:
        description: "Unauthorized request"
      400:
        body:
          application/json:
            type: DetailedAnswer
  /{banner-name}:
    get:
      description: "Retrieves the banner with the specified name"
      responses:
        200:
          body:
            application/json:
              type: Banner
        404:
          description: "The banner with the specified name could not be found"

/colors:
  post:
    securedBy: [token: { scopes: [ admin ] }]
    description: "Creates a color."
    body:
      application/json:
        type: Property
    responses:
      201:
        description: "The color has been added succesfully"
      401:
        description: "Unauthorized request"
      400:
        body:
          application/json:
            type: DetailedAnswer
  get:
    description: "Get all the colors."
    responses:
      200:
        body:
          application/json:
            type: Category[]

/brands:
  post:
    securedBy: [token: { scopes: [ admin ] }]
    description: "Creates a brand."
    body:
      application/json:
        type: Brand
    responses:
      201:
        description: "The brand has been added succesfully"
      401:
        description: "Unauthorized request"
      400:
        body:
          application/json:
            type: DetailedAnswer
  get:
    description: "Get all the brands."
    responses:
      200:
        body:
          application/json:
            type: Category[]

/conditions:
  post:
    securedBy: [token: { scopes: [ admin ] }]
    description: "Creates a product condition."
    body:
      application/json:
        type: Property
    responses:
      201:
        description: "The condition has been added succesfully"
      401:
        description: "Unauthorized request"
      400:
        body:
          application/json:
            type: DetailedAnswer
  get:
    description: "Get all the conditions."
    responses:
      200:
        body:
          application/json:
            type: Category[]

/statuses:
  post:
    securedBy: [token: { scopes: [ admin ] }]
    description: "Creates a product status."
    body:
      application/json:
        type: Property
    responses:
      201:
        description: "The status has been added succesfully"
      401:
        description: "Unauthorized request"
      400:
        body:
          application/json:
            type: DetailedAnswer
  get:
    description: "Get all the statuses."
    responses:
      200:
        body:
          application/json:
            type: Category[]

/categories:
  post:
    securedBy: [token: { scopes: [ admin ] }]
    description: "Creates a product category."
    body:
      application/json:
        type: Category
    responses:
      201:
        description: "The status has been added succesfully"
      401:
        description: "Unauthorized request"
      400:
        body:
          application/json:
            type: DetailedAnswer
  get:
    description: "Get all the categories with subcategories."
    responses:
      200:
        body:
          application/json:
            type: Category[]
