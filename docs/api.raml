#%RAML 1.0
title: Prilov Api
version: 0.6.0
baseUri: https://prilov.aguayo.co/api

securitySchemes:
  token:
    type: Pass Through
    description: "Authentication by header"
    describedBy:
      headers:
        Authorization:
          description: "Use the Bearer keyword. Example Authorization Bearer [API_key]"
          type: string


types:
  BaseObject:
    type: object
    properties:
      id?: datetime
      created_at?: datetime
      updated_at?: datetime
  Property:
    type: BaseObject
    properties:
      name: string
      slug?: string

  Banner:
    type: Property
    properties:
      title: string
      subtitle: string
      image: string
      button_text: string
      url: string
  Brand:
    type: Property
    properties:
      url: string
  Campaign:
    type: Property
  Category:
    type: Property
    properties:
      parent?: number
  Color:
    type: Property
  Condition:
    type: Property
  Status:
    type: Property

  Address:
    type: BaseObject
    properties:
      user_id: integer
      address: string
      region: string
      zone: string
  User:
    type: BaseObject
    properties:
      email: string
      first_name: string
      last_name: string
      password: string
      about?: string
      phone?: string
      cover?: file
      picture?: file
      favorite_address_id?: integer
  UserExpanded:
    type: [User]
    properties:
      addresses: Address[]
  UserLogged:
    type: User
    properties:
      api_token: string
  Product:
    type: BaseObject
    properties:
      title: string
      images: file[]
      description: string
      dimensions: string
      originalPrice: number
      price: number
      commission: number
      user_id: integer
      brand_id: integer
      category_id: integer
      color_ids: integer[]
      condition_id: integer
      status_id: integer
  ProductExpanded:
    type: Product
    properties:
      user?: User
      brand?: Brand
      category?: Category
      colors?: Property[]
      condition?: Property
      size?: Property
      status?: Property
  Auth:
    type: object
    properties:
      email: string
      password: string
  Token:
    type: object
    properties:
      token: string
  ShippingMethod:
    type: BaseObject
    properties:
      name: string
      descriptionSeller: string
      descriptionBuyer: string
  DetailedAnswer:
    type: object
    properties:
      message: string
      errors?:
        type: object
        properties:
          /^[a-z_]*$/: string[]
  Menu:
    type: BaseObject
    properties:
      name: string
      items?: MenuItem[]
  MenuItem:
    type: BaseObject
    properties:
      name: string
      url?: string
      parent_id?: number
      menu_id?: number
      icon?: string

resourceTypes:
  collection:
    post:
      is: [ singleItemPost ]
    get:
      description: Get all the <<resourcePathName|!pluralize|!uppercamelcase>>
      is: [ paginated ]

  singleItem:
    patch:
      is: [ singleItemResponse, dataError ]
      securedBy: [token: { scopes: [ admin ] }]
      description: Update the given <<resourcePathName|!singularize|!uppercamelcase>>
      body:
        multipart/form-data:
          type: <<resourcePathName|!singularize|!uppercamelcase>>
        application/json:
          type: <<resourcePathName|!singularize|!uppercamelcase>>
    get:
      is: [ singleItemResponse ]
      description: Retrieve the given <<resourcePathName|!singularize|!uppercamelcase>>

/users:
  post:
    is: [ singleItemPost ]
  /{user-id}:
    type: singleItem
    get:
      responses:
        200:
          body:
            application/json:
              type: UserExpanded
    patch:
      securedBy: [token: { scopes: [ owner ] }]
    /addresses:
      type: collection

  /login:
    post:
      description: "Logs in an User"
      body:
        application/json:
          type: Auth
          example:  {
            email: "marie@curie.com",
            password: "asd|@123"
          }
      if: [ singleItemResponse ]
      responses:
        200:
          body:
            application/json:
              type: UserLogged
  /password/recovery/{email}:
    get:
      description: "Requires a password recovery link for an user"
      responses:
        200:
          description: "A reset link has been send to the email specified"
        400:
          body:
            application/json:
              type: DetailedAnswer
              example:
                {
                  "message": "There was an error on the request",
                  "errors": {
                    "attempts": [
                      "Too many password request for the given email"
                    ],
                    "email": [
                      "The given email is invalid or empty"
                    ]
                  }
                }
    post:
      description: "Validates a password reset token"
      body:
        application/json:
          type: Token
      responses:
        200:
          description: "The provided password token is valid"
        400:
          description: "The provided password token is invalid"

/menus:
  type: collection
  /{menu-id}:
    type: singleItem
/menu_item:
  type: collection
  /{menu_item-id}:
    type: singleItem

/products:
  type: collection
  /{product-id}:
    type: singleItem
    get:
      responses:
        200:
          body:
            application/json:
              type: ProductExpanded
    patch:
      securedBy: [token: { scopes: [ owner ] }]
  /category/{category-slug}:
    get:
      description: "Gets a paginated result of products with the specified category"
      is: [ paginated ]
      responses:
        404:
          description: "Category not found."
  /campaign/{campaign-slug}:
    get:
      description: "Gets a paginated result of products with the specified campaign"
      is: [ paginated ]
      responses:
        404:
          description: "Campaign not found."

/shipping_methods:
  type: collection
  /{shipping_method-id}:
    type: singleItem

/banners:
  type: collection
  /{banner-slug}:
    type: singleItem
/brands:
  type: collection
  /{brand-slug}:
    type: singleItem
/campaigns:
  type: collection
  /{campaign-slug}:
    type: singleItem
/categories:
  type: collection
  /{category-slug}:
    type: singleItem
/colors:
  type: collection
  /{color-slug}:
    type: singleItem
/conditions:
  type: collection
  /{condition-slug}:
    type: singleItem
/statuses:
  type: collection
  /{status-slug}:
    type: singleItem

traits:
  paginated:
    queryParameters:
      items:
        type: number
        description: "Number of items to retrieve"
      page:
        type: number
        description: "The page number that should be retrieved accordingly to the number of items requested"
    responses:
      200:
        body:
          application/json:
            type: object
            example:
              {
                "current_page": 3,
                "data": [
                  <<resourcePathName|!singularize|!uppercamelcase>>-1,
                  <<resourcePathName|!singularize|!uppercamelcase>>-2,
                  {},
                  <<resourcePathName|!singularize|!uppercamelcase>>-n
                ],
                "first_page_url": "URL-TO-PAGE-1?page=1",
                "from": 31,
                "next_page_url": "URL-TO-NEXT-PAGE?page=4",
                "path": "BASE-URL",
                "per_page": 15,
                "prev_page_url": "URL-TO-PREVIOUS-PAGE?page=2",
                "to": 45
              }

  dataError:
    responses:
      400:
        description: "Invalid data provided."
        body:
          application/json:
            type: DetailedAnswer
            example:
              {
                "message": "The given data was invalid.",
                "errors": {
                  "field_name_1": [
                    "Invalid data provided for field_name_1."
                  ],
                  "field_name_2": [
                    "field_name_2 is required."
                  ]
                }
              }

  singleItemResponse:
    responses:
      200:
        body:
          application/json:
            type: <<resourcePathName|!singularize|!uppercamelcase>>
      404:
        description: "<<resourcePathName|!singularize|!uppercamelcase>> not found."

  singleItemPost:
    description: Create a new <<resourcePathName|!singularize|!uppercamelcase>>
    body:
      multipart/form-data:
        type: <<resourcePathName|!singularize|!uppercamelcase>>
      application/json:
        type: <<resourcePathName|!singularize|!uppercamelcase>>
    is: [ dataError ]
    responses:
      200:
        body:
          application/json:
            type: <<resourcePathName|!singularize|!uppercamelcase>>
